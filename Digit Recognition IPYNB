{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Problem 1: API Integration & Digit Recognition (40 points)\n"
      ],
      "metadata": {
        "id": "-h_tv37HjIa2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Train model*"
      ],
      "metadata": {
        "id": "H2Gv1n34Snrd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#download dataset and relevant tools\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import random\n",
        "\n",
        "from keras.datasets import mnist\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Dropout, Activation\n",
        "from keras.utils import to_categorical\n",
        "\n",
        "import tensorflow.keras.utils as np_utils\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D, Flatten\n",
        "from tensorflow.keras.layers import BatchNormalization\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "-Iz8g4WZjdES"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#load and split data from mnist into training and test\n",
        "(X_train, y_train), (X_test, y_test) = mnist.load_data()\n",
        "\n",
        "#preprocess training data and labels\n",
        "\n",
        "X_train = X_train.reshape(60000, 28, 28, 1)\n",
        "X_test = X_test.reshape(10000, 28, 28, 1)\n",
        "\n",
        "X_train = X_train.astype('float32')\n",
        "X_test = X_test.astype('float32')\n",
        "\n",
        "X_train /= 255     #normalisation\n",
        "X_test /= 255\n",
        "\n",
        "nb_classes = 10 # number of unique digits\n",
        "\n",
        "Y_train = np_utils.to_categorical(y_train, nb_classes)\n",
        "Y_test = np_utils.to_categorical(y_test, nb_classes)\n"
      ],
      "metadata": {
        "id": "oAlEy1oGj4_j"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#CNN model as seen in class\n",
        "\n",
        "\n",
        "model = Sequential()\n",
        "\n",
        "# Convolution Layer 1\n",
        "model.add(Conv2D(32, (3, 3), input_shape=(28,28,1)))\n",
        "model.add(BatchNormalization(axis=-1))\n",
        "convLayer01 = Activation('relu')                     # activation\n",
        "model.add(convLayer01)\n",
        "\n",
        "# Convolution Layer 2\n",
        "model.add(Conv2D(32, (3, 3)))\n",
        "model.add(BatchNormalization(axis=-1))\n",
        "model.add(Activation('relu'))                        # activation\n",
        "convLayer02 = MaxPooling2D(pool_size=(2,2))          # Pool the max values\n",
        "model.add(convLayer02)\n",
        "\n",
        "# Convolution Layer 3\n",
        "model.add(Conv2D(64,(3, 3)))\n",
        "model.add(BatchNormalization(axis=-1))\n",
        "convLayer03 = Activation('relu')                     # activation\n",
        "model.add(convLayer03)\n",
        "\n",
        "# Convolution Layer 4\n",
        "model.add(Conv2D(64, (3, 3)))\n",
        "model.add(BatchNormalization(axis=-1))\n",
        "model.add(Activation('relu'))                        # activation\n",
        "convLayer04 = MaxPooling2D(pool_size=(2,2))          # Pool the max values\n",
        "model.add(convLayer04)\n",
        "model.add(Flatten())                                 # Flatten final output matrix\n",
        "\n",
        "# Fully Connected Layer 5\n",
        "model.add(Dense(512))                                # 512 FCN nodes\n",
        "model.add(BatchNormalization())                      # normalization\n",
        "model.add(Activation('relu'))                        # activation\n",
        "\n",
        "# Fully Connected Layer 6\n",
        "model.add(Dropout(0.2))\n",
        "model.add(Dense(10))\n",
        "model.add(Activation('softmax'))                     # softmax activation\n",
        "\n",
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 881
        },
        "id": "yDtoWWdonURI",
        "outputId": "ea6ffa19-2ca6-408f-db40-8055f4270421"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential_2\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_2\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ conv2d_8 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │             \u001b[38;5;34m320\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_10               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │             \u001b[38;5;34m128\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_12 (\u001b[38;5;33mActivation\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_9 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │           \u001b[38;5;34m9,248\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_11               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │             \u001b[38;5;34m128\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_13 (\u001b[38;5;33mActivation\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_4 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_10 (\u001b[38;5;33mConv2D\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m18,496\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_12               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │             \u001b[38;5;34m256\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_14 (\u001b[38;5;33mActivation\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_11 (\u001b[38;5;33mConv2D\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)            │          \u001b[38;5;34m36,928\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_13               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)            │             \u001b[38;5;34m256\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_15 (\u001b[38;5;33mActivation\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_5 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m64\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ flatten_2 (\u001b[38;5;33mFlatten\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)                │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │         \u001b[38;5;34m524,800\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_14               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │           \u001b[38;5;34m2,048\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_16 (\u001b[38;5;33mActivation\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_5 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)                  │           \u001b[38;5;34m5,130\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_17 (\u001b[38;5;33mActivation\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ conv2d_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_10               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │           <span style=\"color: #00af00; text-decoration-color: #00af00\">9,248</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_11               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_13 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_12               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_13               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_15 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ flatten_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)                │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">524,800</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_14               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">5,130</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ activation_17 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m597,738\u001b[0m (2.28 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">597,738</span> (2.28 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m596,330\u001b[0m (2.27 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">596,330</span> (2.27 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m1,408\u001b[0m (5.50 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,408</span> (5.50 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "collapsed": true,
        "id": "S_VuO23L1cVO"
      },
      "outputs": [],
      "source": [
        "#data augmentation\n",
        "\n",
        "gen = ImageDataGenerator(rotation_range=8, width_shift_range=0.08, shear_range=0.3,\n",
        "                         height_shift_range=0.08, zoom_range=0.08)\n",
        "\n",
        "test_gen = ImageDataGenerator()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#feed data into training model in batches (larger batch higher accuracy for actual)\n",
        "train_generator = gen.flow(X_train, Y_train, batch_size=256)\n",
        "test_generator = test_gen.flow(X_test, Y_test, batch_size=256)\n",
        "#training model\n",
        "model.fit(train_generator, steps_per_epoch=60000//256, epochs=5, verbose=1,\n",
        "                    validation_data=test_generator, validation_steps=10000//256)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JxM6X6lkoXbN",
        "outputId": "8a7fa050-1daa-4767-f66a-91e55f87073f"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m234/234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m129s\u001b[0m 532ms/step - accuracy: 0.8821 - loss: 0.3704 - val_accuracy: 0.2014 - val_loss: 4.2425\n",
            "Epoch 2/5\n",
            "\u001b[1m234/234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.9844 - loss: 0.0482 - val_accuracy: 0.1992 - val_loss: 4.2343\n",
            "Epoch 3/5\n",
            "\u001b[1m234/234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 556ms/step - accuracy: 0.9858 - loss: 0.0481 - val_accuracy: 0.7920 - val_loss: 0.9247\n",
            "Epoch 4/5\n",
            "\u001b[1m234/234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 16ms/step - accuracy: 0.9922 - loss: 0.0255 - val_accuracy: 0.7794 - val_loss: 0.9697\n",
            "Epoch 5/5\n",
            "\u001b[1m234/234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m126s\u001b[0m 537ms/step - accuracy: 0.9874 - loss: 0.0401 - val_accuracy: 0.9890 - val_loss: 0.0366\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7a48c9a081d0>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score = model.evaluate(X_test, Y_test)\n",
        "print('Test score:', score[0])\n",
        "print('Test accuracy:', score[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "abcMG2PWogLI",
        "outputId": "11cff86e-437c-44b9-d180-8013852a9230"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 16ms/step - accuracy: 0.9887 - loss: 0.0370\n",
            "Test score: 0.03650234267115593\n",
            "Test accuracy: 0.9890000224113464\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Stimulated API to get MNIST img***"
      ],
      "metadata": {
        "id": "xzlufjFQSx50"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Stimulated API function to get a random MNIST image\n",
        "def get_random_mnist_image():\n",
        "\n",
        "    # Select a random image\n",
        "    random_index = np.random.randint(0, X_test.shape[0])\n",
        "    random_image = X_test[random_index]\n",
        "    true_label_index = np.argmax(Y_test[random_index])  # Get the index of the true label\n",
        "\n",
        "    return random_image, true_label_index\n",
        "\n",
        "# Get a random image and its true label index\n",
        "random_image, true_label_index = get_random_mnist_image()\n",
        "\n",
        "#reshape\n",
        "random_image_for_prediction = np.expand_dims(random_image, axis=0)\n",
        "\n",
        "# Predict\n",
        "predicted_label = np.argmax(model.predict(random_image_for_prediction))\n",
        "\n",
        "# Display the image, true label, and predicted label\n",
        "plt.imshow(random_image.squeeze(), cmap='gray')\n",
        "plt.title(f'True Label: {true_label_index}, Predicted Label: {predicted_label}')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "9pQl06_xhRn4",
        "outputId": "643429c3-c4bd-4626-f32d-de9c6814d227"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 213ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Problem 2: Hidden Layer Visualization & Analysis"
      ],
      "metadata": {
        "id": "wMO-6vg1xw2X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import backend as K\n",
        "import tensorflow as tf\n",
        "\n",
        "\n",
        "def visualize(layer):\n",
        "    dummy_input = np.random.rand(1, 28, 28, 1)\n",
        "    # Call the model with a dummy input to build it\n",
        "    model.predict(dummy_input)\n",
        "\n",
        "    # Get the name of the last layer (e.g., 'dense_2')\n",
        "    last_layer_name = model.layers[-1].name\n",
        "\n",
        "    grad_model = tf.keras.models.Model(\n",
        "        inputs=model.inputs,\n",
        "        outputs=[layer.output, model.get_layer(last_layer_name).output]\n",
        "    )\n",
        "\n",
        "    # Get a random image using get_random_mnist_image earlier\n",
        "    img, _ = get_random_mnist_image()\n",
        "    img = np.expand_dims(img, axis=0) #process for keras\n",
        "\n",
        "\n",
        "    convolutions = grad_model.predict(img)[0]\n",
        "    convolutions = np.squeeze(convolutions)\n",
        "\n",
        "    print ('Shape of conv:', convolutions.shape)\n",
        "\n",
        "    m = convolutions.shape[2]\n",
        "    n = int(np.ceil(np.sqrt(m)))\n",
        "\n",
        "    # Visualization of each filter of the layer\n",
        "    fig = plt.figure(figsize=(15,12))\n",
        "    for i in range(m):\n",
        "        ax = fig.add_subplot(n,n,i+1)\n",
        "        ax.imshow(convolutions[:,:,i], cmap='gray')\n",
        "\n",
        "visualize(convLayer01)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 743
        },
        "id": "LXMLy4mlhkOY",
        "outputId": "8b01a197-b760-4fdd-aebe-bc22aeac5999"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 49ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 222ms/step\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/models/functional.py:237: UserWarning: The structure of `inputs` doesn't match the expected structure.\n",
            "Expected: ['keras_tensor_464']\n",
            "Received: inputs=Tensor(shape=(1, 28, 28, 1))\n",
            "  warnings.warn(msg)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of conv: (26, 26, 32)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1200 with 32 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Analysis & Neurobiological Discussion:*\n",
        "\n",
        "Discuss what kinds of features the early convolutional layers\n",
        "appear to detect (e.g., edges, corners).\n",
        "Compare these features with what is known about the receptive\n",
        "fields in the human visual cortex (for example, simple cells in\n",
        "V1)\n",
        "\n",
        "\n",
        "**Response**\n",
        "\n",
        "The earlier convolutional layers in the CNN appear to detect simpler and more intuitive features, such as edges, textures, object boundaries, and changes in color. These features correspond to the basic features of an image, and in the case of MNIST numbers, the outline of the number is still visible in the visualizations of the early layers.\n",
        "\n",
        "As the network progresses to deeper layers, the features become increasingly complex and abstract. The outline of the digits fades, and the filter images often look more like pixelated images or block-like structures. This suggests that the model is moving from detecting simple shapes and edges in the early layers to capturing more intricate and high-level representations in the deeper layers, such as complex patterns, textures, or parts of the object.\n",
        "\n",
        "This process mirrors the functioning of the primary visual cortex (V1) and its hierarchical structure. In the human visual cortex, simple cells in V1 are highly sensitive to oriented lines and edges, firing most strongly when a line aligns with their specific receptive field orientation. This behavior can be observed in the filters of the first convolutional layer in the CNN, where each filter captures a specific part of an edge, some of which are aligned in particular orientations—like horizontal, vertical, or at certain angles.\n",
        "\n",
        "The hierarchical nature of both the CNN and the visual cortex is quite similar. In the brain, information from V1 is passed along to higher visual areas (V2-V5), where more complex representations—such as color, motion, and object recognition—are formed. In CNNs, the progression from the 2nd to 4th convolutional layers likely involves the processing of more complex features (such as color or shape). However, due to the limitations of the visualization, it becomes difficult to interpret the exact representations learned by the deeper layers, often resulting in visualizations that look  abstract, such as blocks of black and white.\n",
        "\n",
        "CNNs are trained on data, refining their ability to capture visual features and learn representations. On the other hand, the human visual cortex has been shaped by millions of years of evolution, where environmental factors and survival needs may have played a role in prioritizing certain visual features (e.g., detecting motion or faces). These evolutionary factors have influenced the development of the brain's capacity to process and interpret visual stimuli, thus making it different from CNNs.\n",
        "\n",
        "In conclusion, both CNN and the visual cortex share the principle of building sophisticated visual understanding in a bottom-up manner. Simple visual features, such as edges and textures, are detected first, and as information is passed through subsequent layers, these basic features are combined and consolidated into higher-level, more complex representations."
      ],
      "metadata": {
        "id": "c5Y0wUdRyGqe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_adversarial_example(model, image, true_label, epsilon=0.1):\n",
        "\n",
        "    # Convert image to tensor within the function\n",
        "    image = tf.convert_to_tensor(image)\n",
        "    original_label = tf.convert_to_tensor([true_label])\n",
        "\n",
        "    with tf.GradientTape() as tape:\n",
        "        tape.watch(image)\n",
        "        prediction = model(image)\n",
        "        loss = tf.keras.losses.sparse_categorical_crossentropy(original_label, prediction)\n",
        "\n",
        "    gradient = tape.gradient(loss, image)\n",
        "    perturbation = epsilon * tf.sign(gradient)\n",
        "    adv_image = image + perturbation\n",
        "    adv_image = tf.clip_by_value(adv_image, 0.0, 1.0)  # Ensure valid pixel values\n",
        "\n",
        "    original_prediction = np.argmax(model.predict(image))\n",
        "    adversarial_prediction = np.argmax(model.predict(adv_image))\n",
        "\n",
        "    return adv_image, original_prediction, adversarial_prediction\n",
        "\n",
        "# Get a random image and its true label\n",
        "random_image, true_label = get_random_mnist_image()\n",
        "random_image_for_model = np.expand_dims(random_image, axis=0)\n",
        "\n",
        "# Generate an adversarial example\n",
        "adv_image, original_prediction, adversarial_prediction = generate_adversarial_example(\n",
        "    model, random_image_for_model, true_label, epsilon=0.1\n",
        ")\n",
        "\n",
        "original_prediction = np.argmax(model.predict(random_image_for_model))\n",
        "print(f\"Original prediction (separate check): {original_prediction}\")\n",
        "\n",
        "# Display the results\n",
        "plt.figure(figsize=(10, 7))  # Increase figure height to accommodate perturbation\n",
        "\n",
        "# Original image\n",
        "plt.subplot(2, 2, 1)  # 2 rows, 2 columns, first subplot\n",
        "plt.imshow(random_image_for_model.squeeze(), cmap='gray')  # Use random_image_for_model\n",
        "plt.title(f'Original Image\\nPrediction: {original_prediction}, True Label: {true_label}')\n",
        "\n",
        "# Adversarial image\n",
        "plt.subplot(2, 2, 2)  # 2 rows, 2 columns, second subplot\n",
        "plt.imshow(adv_image.numpy().squeeze(), cmap='gray')\n",
        "plt.title(f'Adversarial Image\\nPrediction: {adversarial_prediction}')\n",
        "\n",
        "# Perturbation\n",
        "plt.subplot(2, 1, 2)  # 2 rows, 1 column, second subplot (spanning full width)\n",
        "perturbation = adv_image - tf.convert_to_tensor(random_image_for_model)  # Calculate perturbation correctly\n",
        "plt.imshow(perturbation.numpy().squeeze(), cmap='gray')\n",
        "plt.title('Perturbation (Magnified)')\n",
        "\n",
        "plt.tight_layout()  # Adjust subplot parameters for a tight layout\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 690
        },
        "id": "rPt0vUmNnSFo",
        "outputId": "2ab232a6-c336-489c-987a-250caf5febc7"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n",
            "Original prediction (separate check): 6\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 3 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAyoAAAKyCAYAAAA6iypdAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAdchJREFUeJzt3Xd4VGX6//HPJMAkQBJqGoQQQpPqV5Ai0iMBBURRKeoCFhABBVYRXKmyRrGhLM2yYAkguBR1FVe6KKigiIAgsKEJhKIkEEiA5Pn9wS+zDEnICZlkTsj7dV1zwZx55jn3OWcyz7nnlNthjDECAAAAABvx8XYAAAAAAHAlEhUAAAAAtkOiAgAAAMB2SFQAAAAA2A6JCgAAAADbIVEBAAAAYDskKgAAAABsh0QFAAAAgO2QqAAAAACwHRIVZDFhwgQ5HI5reu/cuXPlcDi0b98+zwZ1mX379snhcGju3LkFNg8AAApSYYyXduBwODRhwoQ8v2/NmjVyOBxas2aNx2NC0UGich3Zvn27HnjgAVWpUkVOp1Ph4eG6//77tX37dm+H5hWZX3Iff/yxt0MBAFynZsyYIYfDoebNm3s7lGIpM+HbtGmTt0NBASBRuU4sXrxYN910k1auXKkBAwZoxowZevjhh7V69WrddNNNWrJkieW+nnvuOZ07d+6a4njwwQd17tw5RUZGXtP7AQAoSuLj41W9enV9//332rNnj7fDsZ1z587pueee83YYKKJIVK4De/fu1YMPPqgaNWpo69atmjx5sh5++GE9//zz2rp1q2rUqKEHH3xQ//3vf6/aT0pKiiSpRIkS8vPzu6ZYfH195efnd82njgEAUFQkJCTo22+/1WuvvabKlSsrPj7e2yHl6uzZswU+j4yMDKWmpkqS/Pz8VKJEiQKfJ65PJCrXgZdffllnz57VW2+9pcqVK7u9VqlSJc2ePVspKSmaMmWKa3rmdSg7duxQ3759Vb58ed16661ur13u3LlzeuKJJ1SpUiUFBASoe/fu+v3337Oce5rdObfVq1dX165dtX79ejVr1kx+fn6qUaOG3n//fbd5/PHHH3rqqafUsGFDlS1bVoGBgerSpYt+/vlnD62p/y3bb7/9pgceeEBBQUGqXLmyxo4dK2OMDh48qDvvvFOBgYEKDQ3Vq6++6vb+8+fPa9y4cWrSpImCgoJUpkwZtW7dWqtXr84yr5MnT+rBBx9UYGCgypUrp379+unnn3/O9vqanTt36p577lGFChXk5+enpk2b6pNPPvHYcgMAPC8+Pl7ly5fXHXfcoXvuuSfHRGX79u3q0KGD/P39VbVqVU2ePFkZGRlubbp27aoaNWpk+/6WLVuqadOmbtM+/PBDNWnSRP7+/qpQoYJ69+6tgwcPurVp166dGjRooM2bN6tNmzYqXbq0nn32WUnSpk2bFBsbq0qVKsnf319RUVF66KGH3N7/yiuv6JZbblHFihXl7++vJk2aZHs6tcPh0NChQxUfH6/69evL6XRq+fLlrtcu30/Yv3+/Hn/8cdWpU0f+/v6qWLGi7r33Xo9eq9O/f3+VLVtWBw4cUNeuXVW2bFlVqVJF06dPlyT98ssv6tChg8qUKaPIyEjNmzfP7f152R/Zv3+/unfvrjJlyig4OFgjRozQl19+me31Nd999506d+6soKAglS5dWm3bttU333zjseW+HpHiXgc+/fRTVa9eXa1bt8729TZt2qh69er697//neW1e++9V7Vq1dILL7wgY0yO8+jfv78WLlyoBx98UC1atNDatWt1xx13WI5xz549uueee/Twww+rX79++uc//6n+/furSZMmql+/viTpv//9r5YuXap7771XUVFRSkxM1OzZs9W2bVvt2LFD4eHhlueXm169eumGG27Qiy++qH//+9+aPHmyKlSooNmzZ6tDhw566aWXFB8fr6eeeko333yz2rRpI0lKTk7WO++8oz59+ujRRx/V6dOn9e677yo2Nlbff/+9brzxRkmXfk3q1q2bvv/+ew0ePFh169bVsmXL1K9fvyyxbN++Xa1atVKVKlU0evRolSlTRgsXLlSPHj30r3/9S3fddZfHlhsA4Dnx8fG6++67VapUKfXp00czZ87UDz/8oJtvvtnV5ujRo2rfvr0uXrzo+o5/66235O/v79ZXr1699Je//CXL+/fv36+NGzfq5Zdfdk37+9//rrFjx+q+++7TI488ouPHj2vatGlq06aNfvrpJ5UrV87V9uTJk+rSpYt69+6tBx54QCEhITp27Jg6deqkypUra/To0SpXrpz27dunxYsXu8X0xhtvqHv37rr//vt1/vx5LViwQPfee68+++yzLPsAq1at0sKFCzV06FBVqlRJ1atXz3ad/fDDD/r222/Vu3dv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PTrW5zSme2N/JPM9L7/8suta1itdud1wCYnKdaBr1656++23tX79eteduy739ddfa9++fRo0aNA19R8ZGamMjAwlJCS4/Srk6fvFf/zxx2rfvr3effddt+mnTp3KcqTDWz7++GPVqFFDixcvdvsFJfPoR6bIyEitXr1aZ8+edTuqcuU6y7zDS8mSJRUTE1OAkQMAPCU+Pl7BwcGuu0hdbvHixVqyZIlmzZolf39/RUZGun5Rv9yuXbuyTCtTpoy6du2qRYsW6bXXXtNHH32k1q1bu91MJjo6WsYYRUVFqXbt2vlajhYtWqhFixb6+9//rnnz5un+++/XggUL9Mgjj+hf//qX/Pz89OWXX8rpdLreM2fOnHzN8+OPP1a/fv3c7qqZmpqqU6dO5atfT7K6PxIZGakdO3bIGOO2T3DlWB8dHS3p0ul9jPV5w6lf14Gnn35a/v7+GjRokE6ePOn22h9//KHHHntMpUuX1tNPP31N/Wf+0j9jxgy36dOmTbu2gHPg6+ub5c5jixYtstU1Gpm/xFwe53fffec6TJ8pNjZWFy5c0Ntvv+2alpGRkWVQCw4OVrt27TR79mwdOXIky/yOHz/uyfABAPl07tw5LV68WF27dtU999yT5TF06FCdPn3adYv522+/XRs3btT333/v6uP48eM53sq4V69eOnz4sN555x39/PPPbqd9SdLdd98tX19fTZw4McuYaYzJsh+QnT///DPLezN/6c88/cvX11cOh8Ptept9+/Zp6dKlufZ/NdmN9dOmTXObj7dZ3R+JjY3V77//7lZOIDU11W3sl6QmTZooOjpar7zyis6cOZNlfoz1OeOIynWgVq1aeu+993T//ferYcOGevjhhxUVFaV9+/bp3Xff1YkTJzR//nxXRp9XTZo0Uc+ePTV16lSdPHnSdXvi3377TZI8Vtyxa9eumjRpkgYMGKBbbrlFv/zyi+Lj43O8r7w3dO3aVYsXL9Zdd92lO+64QwkJCZo1a5bq1avn9uXTo0cPNWvWTH/961+1Z88e1a1bV5988on++OMPSe7rbPr06br11lvVsGFDPfroo6pRo4YSExO1YcMGHTp0yKN1ZAAA+fPJJ5/o9OnTbhdQX65Fixau4o+9evXSqFGj9MEHH6hz58568sknXbcnjoyMzPa07dtvv10BAQF66qmn5Ovrq549e7q9Hh0drcmTJ2vMmDHat2+fevTooYCAACUkJGjJkiUaOHCgnnrqqasuw3vvvacZM2borrvuUnR0tE6fPq23335bgYGBuv322yVJd9xxh1577TV17txZffv21bFjxzR9+nTVrFkz19PNr6Zr16764IMPFBQUpHr16mnDhg1asWKFKlaseM19eprV/ZFBgwbpH//4h/r06aMnn3xSYWFhio+PdxXNzhzrfXx89M4776hLly6qX7++BgwYoCpVquj333/X6tWrFRgYqE8//bTQl7MoIFG5Ttx7772qW7eu4uLiXMlJxYoV1b59ez377LNq0KBBvvp///33FRoaqvnz52vJkiWKiYnRRx99pDp16lxzFfsrPfvss0pJSdG8efP00Ucf6aabbtK///1vjR492iP9e0L//v119OhRzZ49W19++aXq1aunDz/8UIsWLXIr7OTr66t///vfevLJJ/Xee+/Jx8dHd911l8aPH69WrVq5rbN69epp06ZNmjhxoubOnauTJ08qODhY//d//6dx48Z5YSkBADnJ3BG97bbbsn3dx8dHd9xxh+Lj43Xy5EmFhYVp9erVGjZsmF588UVVrFhRjz32mMLDw93uNJnJz89P3bt3V3x8vGJiYhQcHJylzejRo1W7dm29/vrrmjhxoiQpIiJCnTp1yjGBulzbtm31/fffa8GCBUpMTFRQUJCaNWum+Ph410XxHTp00LvvvqsXX3xRw4cPV1RUlF566SXt27cvX4nKG2+8IV9fX8XHxys1NVWtWrXSihUrcrxO0xus7o+ULVtWq1at0rBhw/TGG2+obNmy+stf/qJbbrlFPXv2dBvr27Vrpw0bNuj555/XP/7xD505c0ahoaFq3rz5NZ+aXxw4zJXHtgCLtmzZov/7v//Thx9+mOU2i8je0qVLddddd2n9+vVq1aqVt8MBAAAeNnXqVI0YMUKHDh1SlSpVvB1OkcY1KrDk3LlzWaZNnTpVPj4+rqrtcHflOktPT9e0adMUGBiom266yUtRAQAAT7lyrE9NTdXs2bNVq1YtkhQP4NQvWDJlyhRt3rxZ7du3V4kSJfTFF1/oiy++0MCBAxUREeHt8Gxp2LBhOnfunFq2bKm0tDQtXrxY3377rV544YVCuy00AAAoOHfffbeqVaumG2+8UUlJSfrwww+1c+fOHG+WgLzh1C9Y8tVXX2nixInasWOHzpw5o2rVqunBBx/U3/72N5UoQb6bnXnz5unVV1/Vnj17lJqaqpo1a2rw4MEaOnSot0MDAAAeMHXqVL3zzjvat2+f0tPTVa9ePY0aNSrL3dpwbUhUAAAAANgO16gAAAAAsB0SFQAAAAC2Q6LiZdWrV1f//v1dz9esWSOHw+FWkyO/HA6HJkyY4LH+4H3t2rXLd22cK135WQQAFE/sm8AuinWiMnfuXDkcDtfDz89PtWvX1tChQ5WYmOjt8PLk888/L1J/8BkZGZo5c6ZuvPFG+fv7q2LFiurQoUOeq7BnfnlaeXibw+G47i+k37t3r/r27avg4GD5+/urVq1a+tvf/ubtsACgyGDfxPsuXLigevXqyeFw6JVXXvF2OMUat2uSNGnSJEVFRSk1NVXr16/XzJkz9fnnn2vbtm0qXbp0ocbSpk0bnTt3TqVKlcrT+z7//HNNnz492y+Ec+fO2e7OXA899JDi4+P1l7/8RUOHDlVKSop++uknHTt2LE/93HDDDfrggw/cpo0ZM0Zly5ZlB7mQbdmyRe3atVOVKlX017/+VRUrVtSBAwd08OBBb4cGAEUO+ybeM23aNB04cMDbYUAkKpKkLl26qGnTppKkRx55RBUrVtRrr72mZcuWqU+fPtm+JyUlRWXKlPF4LD4+PvLz8/Non57uL78WLlyo9957T4sXL9Zdd92Vr75CQkL0wAMPuE178cUXValSpSzTL5eRkaHz58/bbt0UVRkZGXrwwQdVt25drV69mjoxAJBP7Jt4x7FjxzRp0iQ988wzGjdunLfDKfaK9alfOenQoYMkKSEhQZLUv39/lS1bVnv37tXtt9+ugIAA3X///ZIu7aBNnTpV9evXl5+fn0JCQjRo0CD9+eefbn0aYzR58mRVrVpVpUuXVvv27bV9+/Ys887pPNDvvvtOt99+u8qXL68yZcqoUaNGeuONN1zxTZ8+XZKyPdUpu/NAf/rpJ3Xp0kWBgYEqW7asOnbsqI0bN7q1yTz8/M0332jkyJGqXLmyypQpo7vuukvHjx93a5uUlKSdO3cqKSkp1/X72muvqVmzZrrrrruUkZGhlJSUXN+TX5mnXcXHx6t+/fpyOp1avnx5jut73759cjgcmjt3rtv0nTt36p577lGFChXk5+enpk2b6pNPPvFYnMuWLdMdd9yh8PBwOZ1ORUdH6/nnn1d6enq27Tdv3qxbbrlF/v7+ioqK0qxZs7K0SUtL0/jx41WzZk05nU5FRERo1KhRSktLyzWevXv3au/evbm2+89//qNt27Zp/Pjx8vf319mzZ3OMGQCQd+ybXFJQ+yaZRo8erTp16lz1x04UHhKVbGTumFWsWNE17eLFi4qNjVVwcLBeeeUV9ezZU5I0aNAgPf3002rVqpXeeOMNDRgwQPHx8YqNjdWFCxdc7x83bpzGjh2rxo0b6+WXX1aNGjXUqVMnSzvpX331ldq0aaMdO3boySef1Kuvvqr27dvrs88+c8Vw2223SZI++OAD1yMn27dvV+vWrfXzzz9r1KhRGjt2rBISEtSuXTt99913WdoPGzZMP//8s8aPH6/Bgwfr008/zXKtxZIlS3TDDTdoyZIlV12W5ORkff/997r55pv17LPPKigoSGXLllWNGjW0cOHCXNdFfqxatUojRoxQr1699MYbb6h69ep5ev/27dvVokUL/frrrxo9erReffVVlSlTRj169Mh1ua2aO3euypYtq5EjR+qNN95QkyZNNG7cOI0ePTpL2z///FO33367mjRpoilTpqhq1aoaPHiw/vnPf7raZGRkqHv37nrllVfUrVs3TZs2TT169NDrr79uqRhVx44d1bFjx1zbrVixQpLkdDrVtGlTlSlTRqVLl1bv3r31xx9/5GENAACyw76JO0/um2T6/vvv9d5772nq1Km2uLYVkkwxNmfOHCPJrFixwhw/ftwcPHjQLFiwwFSsWNH4+/ubQ4cOGWOM6devn5FkRo8e7fb+r7/+2kgy8fHxbtOXL1/uNv3YsWOmVKlS5o477jAZGRmuds8++6yRZPr16+eatnr1aiPJrF692hhjzMWLF01UVJSJjIw0f/75p9t8Lu9ryJAhJqfNKcmMHz/e9bxHjx6mVKlSZu/eva5phw8fNgEBAaZNmzZZ1k9MTIzbvEaMGGF8fX3NqVOnsrSdM2dOtjFk+vHHH40kU7FiRRMSEmJmzJhh4uPjTbNmzYzD4TBffPHFVd9vRf369U3btm3dpkkyPj4+Zvv27W7Tr1zfmRISErIsT8eOHU3Dhg1Namqqa1pGRoa55ZZbTK1atXKNS5IZMmTIVducPXs2y7RBgwaZ0qVLu823bdu2RpJ59dVXXdPS0tLMjTfeaIKDg8358+eNMcZ88MEHxsfHx3z99ddufc6aNctIMt98841rWmRkpNtnMXNaZGRkrsvWvXt313a9//77zccff2zGjh1rSpQoYW655Ra3zw8AIGfsmxT+vklm3M2aNTN9+vQxxvxvP+Dll1/O9b0oOBxRkRQTE6PKlSsrIiJCvXv3VtmyZbVkyRJVqVLFrd3gwYPdni9atEhBQUG67bbbdOLECdejSZMmKlu2rFavXi3p0q/N58+f17Bhw9wy9OHDh+ca208//aSEhAQNHz5c5cqVc3vtWrL99PR0/ec//1GPHj1Uo0YN1/SwsDD17dtX69evV3Jystt7Bg4c6Dav1q1bKz09Xfv373dN69+/v4wxud7e9syZM5KkkydPatmyZRo8eLD69u2rlStXqmLFipo8eXKel8mqtm3bql69etf03j/++EOrVq3Sfffdp9OnT7u29cmTJxUbG6vdu3fr999/z3eMl1/bkTmf1q1b6+zZs9q5c6db2xIlSmjQoEGu56VKldKgQYN07Ngxbd68WdKlz+gNN9ygunXrun1GM08hyPyM5mTfvn3at29frnFnbtebb75ZH374oXr27KlJkybp+eef17fffquVK1daWn4AwCXsmxTevol06YyGX375RS+99FKe40fB4WJ6SdOnT1ft2rVVokQJhYSEqE6dOvLxcc/hSpQooapVq7pN2717t5KSkhQcHJxtv5l3sMr8o6lVq5bb65UrV1b58uWvGlvmoV5P1cw4fvy4zp49qzp16mR57YYbblBGRoYOHjyo+vXru6ZXq1bNrV1mzFee62pF5o54VFSUmjdv7ppetmxZdevWTR9++KEuXrxYIHcCiYqKuub37tmzR8YYjR07VmPHjs22zbFjx7IMIHm1fft2Pffcc1q1alWWL+Urz7ENDw/PctFk7dq1JV1KMFq0aKHdu3fr119/VeXKlXOM2RMyt+uVF3j27dtXY8aM0bfffquYmBiPzAsAigP2TS4pjH2T5ORkjRkzRk8//bQiIiLy/H4UHBIVSc2aNXPdWSMnTqczyxdERkaGgoODFR8fn+17cto5LGp8fX2znW6MyXNf4eHhki7dretKwcHBunDhglJSUhQUFJTnvnOT3Z2ocvrl58oLwTMyMiRJTz31lGJjY7N9T82aNfMV36lTp9S2bVsFBgZq0qRJio6Olp+fn3788Uc988wzrhjyIiMjQw0bNtRrr72W7eue+kLOabtmDpTXMnAAQHHGvsnVeXLf5JVXXtH58+fVq1cv11kEhw4dknRp/Nq3b5/Cw8PzfHtm5B+JSj5ER0drxYoVatWq1VVvxxoZGSnp0q8clx/SPH78eK47cNHR0ZKkbdu2XfUXaauHWitXrqzSpUtr165dWV7buXOnfHx8CvTXhPDwcIWGhmZ7mtThw4fl5+engICAApv/lTJ/gTl16pTb9MsPHUtybbeSJUsW2JGBNWvW6OTJk1q8eLHatGnjmp55h5crHT58OMutKH/77TdJct0oIDo6Wj///LM6duxYoBcGNmnSRG+//XaW7Xr48GFJ18/ACAB2x75J3h04cEB//vmn2xGbTC+88IJeeOEF/fTTT7rxxhsLLAZkj2tU8uG+++5Tenq6nn/++SyvXbx40bXzGxMTo5IlS2ratGlumf7UqVNzncdNN92kqKgoTZ06NcvO9OV9Ze6sXtnmSr6+vurUqZOWLVvmdu1BYmKi5s2bp1tvvVWBgYG5xnWlvNwCsFevXjp48KC++uor17QTJ05o2bJl6tChQ5ZfhwpSZGSkfH19tW7dOrfpM2bMcHseHBysdu3aafbs2Tpy5EiWfq68JeK1yPx16PLtev78+SyxZLp48aJmz57t1nb27NmqXLmymjRpIunSZ/T333/X22+/neX9586dy/XOLlZvT3znnXfK6XRqzpw5bkd+3nnnHUly3fkFAFCw2Df5H6v7Jk888YSWLFni9sgcX/v3768lS5bk6/RxXDuOqORD27ZtNWjQIMXFxWnLli3q1KmTSpYsqd27d2vRokV64403dM8996hy5cp66qmnFBcXp65du+r222/XTz/9pC+++EKVKlW66jx8fHw0c+ZMdevWTTfeeKMGDBigsLAw7dy5U9u3b9eXX34pSa4d0yeeeEKxsbHy9fVV7969s+1z8uTJ+uqrr3Trrbfq8ccfV4kSJTR79mylpaVpypQp17QulixZogEDBmjOnDm5XrQ2ZswYLVy4UD179tTIkSMVFBSkWbNm6cKFC3rhhRfc2mYeGbByQfe1CAoK0r333qtp06bJ4XAoOjpan332WbbXbkyfPl233nqrGjZsqEcffVQ1atRQYmKiNmzYoEOHDunnn3/OdX6bNm3K9oYB7dq10y233KLy5curX79+euKJJ+RwOPTBBx/keBg7PDxcL730kvbt26fatWvro48+0pYtW/TWW2+pZMmSkqQHH3xQCxcu1GOPPabVq1erVatWSk9P186dO7Vw4UJ9+eWXVz21IPPWxLmt/9DQUP3tb3/TuHHj1LlzZ/Xo0UM///yz3n77bfXp00c333xzrusGAJB/7Jv8j9V9k5tuukk33XST27TMca9+/frq0aPHNc0fHuClu43ZQuZt63744YertuvXr58pU6ZMjq+/9dZbpkmTJsbf398EBASYhg0bmlGjRpnDhw+72qSnp5uJEyeasLAw4+/vb9q1a2e2bduW5ZawOd0ud/369ea2224zAQEBpkyZMqZRo0Zm2rRprtcvXrxohg0bZipXrmwcDofb7QB1xS0Ajbl0m+DY2FhTtmxZU7p0adO+fXvz7bffWlo/2cWYl1sAGmPM3r17zV133WUCAwONv7+/6dChg/n++++ztKtUqZJp0aKFpT4z5XR74pxuDXz8+HHTs2dPU7p0aVO+fHkzaNAgs23btmyXZ+/eveYvf/mLCQ0NNSVLljRVqlQxXbt2NR9//HGucUnK8fH8888bY4z55ptvTIsWLYy/v78JDw83o0aNMl9++WWW9d22bVtTv359s2nTJtOyZUvj5+dnIiMjzT/+8Y8s8z1//rx56aWXTP369Y3T6TTly5c3TZo0MRMnTjRJSUmudvm5PbExl27tOG3aNFO7dm1TsmRJExERYZ577jnXrZIBALlj38R7+yaX4/bE9uAw5hquOgIKwY4dO1S/fn199tlnuuOOO7wdDgAAAAoR16jAtlavXq2WLVuSpAAAABRDHFEBAAAAYDscUQEAAABgOyQqAAAAAGyHRAUAAACA7ZCoAAAAALAd2xV8zMjI0OHDhxUQECCHw+HtcAAUEcYYnT59WuHh4fLx4TcYoDAwZgO4FlbH7AJLVKZPn66XX35ZR48eVePGjTVt2jQ1a9Ys1/cdPnxYERERBRUWgOvcwYMHVbVqVW+HARQZ1zpeS4zZAPIntzG7QBKVjz76SCNHjtSsWbPUvHlzTZ06VbGxsdq1a5eCg4Ov+t6AgICCCAlAMcF3CGBdfsZryf5/byEhIYU+z8TERI/1ZTV+T87TW6wsq6eX05OfD2/Edj2sj9y+Qwrk/IjXXntNjz76qAYMGKB69epp1qxZKl26tP75z3/m+l4OHQPID75DAOvyM15L9v978/HxKfSHN+K/HnhjOe263a3G5o15enp95PYd4vGlPH/+vDZv3qyYmJj/zcTHRzExMdqwYYOnZwcAAK4B4zUAu/P4qV8nTpxQenp6lsNHISEh2rlzZ5b2aWlpSktLcz1PTk72dEgAAOAKeR2vJcZsAIXL68cL4+LiFBQU5HpwUR4AAPbEmA2gMHk8UalUqZJ8fX2zXESTmJio0NDQLO3HjBmjpKQk1+PgwYOeDgkAAFwhr+O1xJgNoHB5PFEpVaqUmjRpopUrV7qmZWRkaOXKlWrZsmWW9k6nU4GBgW4PAABQsPI6XkuM2QAKV4HcnnjkyJHq16+fmjZtqmbNmmnq1KlKSUnRgAEDCmJ2AADgGjBeA7CzAklUevXqpePHj2vcuHE6evSobrzxRi1fvtwr9zMHAADZK8zxOiwsLNc2R44c8VhfeenPk6zGVtTnaed16+nYvLGsVuZZHNZHgVWmHzp0qIYOHVpQ3QMAAA9gvAZgV16/6xcAAAAAXIlEBQAAAIDtkKgAAAAAsB0SFQAAAAC2Q6ICAAAAwHZIVAAAAADYDokKAAAAANspsDoqAAAAxY2dCyHamV2LKnqanYuVWuXJ4q254YgKAAAAANshUQEAAABgOyQqAAAAAGyHRAUAAACA7ZCoAAAAALAdEhUAAAAAtkOiAgAAAMB2SFQAAAAA2A6JCgAAAADboTI9CsXYsWNzbfPggw9a6mv79u2W2g0cODDXNsePH7fUFwAgfzxZadvOVbu9wer6sFoVfdy4cbm2qVevnqW+rI7Zjz/+uKV23lCYldjhjiMqAAAAAGyHRAUAAACA7ZCoAAAAALAdEhUAAAAAtkOiAgAAAMB2SFQAAAAA2A6JCgAAAADbIVEBAAAAYDskKgAAAABsh8r0yJdSpUpZahcdHe2RNpJUo0YNS+1uuummXNt8+eWXlvoCAOQsJCREPj5X/+3Tk5W7rVZYL+rVwj29nFbbWRmPrY7FVtvNmDEj1zbbtm2z1JedeeMzafVzZEccUQEAAABgOyQqAAAAAGyHRAUAAACA7ZCoAAAAALAdEhUAAAAAtkOiAgAAAMB2SFQAAAAA2A6JCgAAAADbIVEBAAAAYDtUpke26tWrZ6ndqFGjLLV74IEH8hOOmx07dlhqt3PnTo/NEwBQvHm6SryV/qz21bFjR0vtnnnmGUvtbrjhBkvtrLA6Zu/atctj8/T0toL3ePyIyoQJE+RwONwedevW9fRsAABAPjBeA7C7AjmiUr9+fa1YseJ/MynBgRsAAOyG8RqAnRXIN1KJEiUUGhpaEF0DAAAPYbwGYGcFcjH97t27FR4erho1auj+++/XgQMHcmyblpam5ORktwcAACh4eRmvJcZsAIXL44lK8+bNNXfuXC1fvlwzZ85UQkKCWrdurdOnT2fbPi4uTkFBQa5HRESEp0MCAABXyOt4LTFmAyhcHk9UunTponvvvVeNGjVSbGysPv/8c506dUoLFy7Mtv2YMWOUlJTkehw8eNDTIQEAgCvkdbyWGLMBFK4Cv2quXLlyql27tvbs2ZPt606nU06ns6DDAAAAV5HbeC0xZgMoXAVe8PHMmTPau3ev5XtaAwCAwsd4DcBuPH5E5amnnlK3bt0UGRmpw4cPa/z48fL19VWfPn08PSsUoMjISEvtPFnI0aoPP/zQUrv9+/cXcCQAUHQV9njtyQKH3ijU58lCjnnpz4oTJ05YanfbbbdZanfo0KH8hOPmgw8+sNSuUqVKubbx9Hb3ZFJ+PST4nv6Me4LHE5VDhw6pT58+OnnypCpXrqxbb71VGzduVOXKlT09KwAAcI0YrwHYnccTlQULFni6SwAA4GGM1wDsrsCvUQEAAACAvCJRAQAAAGA7JCoAAAAAbIdEBQAAAIDtkKgAAAAAsB0SFQAAAAC2Q6ICAAAAwHY8XkcF14d69ep5O4Qc/etf//J2CACAPPJGNXlv8EZ1b6tjticrzlu1b98+j/V1PVR/tzM7rl+OqAAAAACwHRIVAAAAALZDogIAAADAdkhUAAAAANgOiQoAAAAA2yFRAQAAAGA7JCoAAAAAbIdEBQAAAIDtkKgAAAAAsB0q019HHA5Hrm0eeughS32NHz8+v+Hk2bvvvmupXXGpbgwARUViYmKubaxUvfZ0VXdvjBdWY/PkmP3ggw9aale1alVL7axUsN+yZYulvhiziw5P//15AkdUAAAAANgOiQoAAAAA2yFRAQAAAGA7JCoAAAAAbIdEBQAAAIDtkKgAAAAAsB0SFQAAAAC2Q6ICAAAAwHYcxhjj7SAul5ycrKCgIG+HUSRZKR514cKFQogkq48//jjXNr179y6ESHC9S0pKUmBgoLfDAIoFu4/ZniwM6ekid1bmaXUXzUqBRsl6wcevv/461za9evWy1BcKjh0LNGayGltuYzZHVAAAAADYDokKAAAAANshUQEAAABgOyQqAAAAAGyHRAUAAACA7ZCoAAAAALAdEhUAAAAAtkOiAgAAAMB2SFQAAAAA2E4JbweA3JUrV85SuwcffDDXNlaq1+fFqVOnLLWbMWOGR+cLAEBhslpp26qePXvm2sbTFee3bdtmqd306dMttYN3ebrivCc/47nFlpGRocTExFz7yfMRlXXr1qlbt24KDw+Xw+HQ0qVL3V43xmjcuHEKCwuTv7+/YmJitHv37rzOBgAA5APjNYCiLs+JSkpKiho3bpxjtj1lyhS9+eabmjVrlr777juVKVNGsbGxSk1NzXewAADAGsZrAEVdnk/96tKli7p06ZLta8YYTZ06Vc8995zuvPNOSdL777+vkJAQLV26VL17985ftAAAwBLGawBFnUcvpk9ISNDRo0cVExPjmhYUFKTmzZtrw4YNnpwVAAC4RozXAIoCj15Mf/ToUUlSSEiI2/SQkBDXa1dKS0tTWlqa63lycrInQwIAAFe4lvFaYswGULi8fnviuLg4BQUFuR4RERHeDgkAAGSDMRtAYfJoohIaGipJWW43lpiY6HrtSmPGjFFSUpLrcfDgQU+GBAAArnAt47XEmA2gcHk0UYmKilJoaKhWrlzpmpacnKzvvvtOLVu2zPY9TqdTgYGBbg8AAFBwrmW8lhizARSuPF+jcubMGe3Zs8f1PCEhQVu2bFGFChVUrVo1DR8+XJMnT1atWrUUFRWlsWPHKjw8XD169PBk3AAA4CoYrwEUdXlOVDZt2qT27du7no8cOVKS1K9fP82dO1ejRo1SSkqKBg4cqFOnTunWW2/V8uXL5efn57morxOVK1e21K579+6W2r3++uu5tjHGWOrr+PHjltp98sknltqtW7fOUjsAgGfYbby2UkXb09XfPdlfo0aNLLWrUqWKpXZTp07NtY3VivNW7du3z1I7xmzYRZ4TlXbt2l11Z9fhcGjSpEmaNGlSvgIDAADXjvEaQFHn9bt+AQAAAMCVSFQAAAAA2A6JCgAAAADbIVEBAAAAYDskKgAAAABsh0QFAAAAgO2QqAAAAACwHRIVAAAAALaT54KPKHwDBw4s9Hlu2rTJUrtBgwYVcCT2ULNmTY/299hjj+Xa5oYbbrDUl8PhsNRu+/btubaZMGGCpb5SUlIstQOATJ6uOm9X3hgXf/zxR0vtrO5PeHJbhYWFeawvq3G1adPGUrvNmzdbavf222/n2sYbY/b48eMt9WV1zPbGtsoNR1QAAAAA2A6JCgAAAADbIVEBAAAAYDskKgAAAABsh0QFAAAAgO2QqAAAAACwHRIVAAAAALZDogIAAADAdij46EXHjx+31O7EiRMFHEnxdc8991hq99FHH1lqZ4zJTzjXxGrxqE6dOuXaxmphy9dff91Su3Xr1llqBwB2t3XrVkvtvDFmWy1c6I1CjlbnaaW/W265xVJfa9eutdTu0KFDltp5g5WilSNHjrTUl9X14ckxO7ftmZGRocTExFz74YgKAAAAANshUQEAAABgOyQqAAAAAGyHRAUAAACA7ZCoAAAAALAdEhUAAAAAtkOiAgAAAMB2SFQAAAAA2A6JCgAAAADboTK9F/3222+W2kVHR3tsntOmTbPUbvjw4R6bp6e98847ltoNGDDAY/P08bGW02dkZHhsnlZ5Mrbu3btb6uvChQuW2lGZHoA3Wa2ebsWCBQsstbNSUdyqZ555xlK7Dz74wFI7T64PqxXnn3/+eUvt+vfvn49ork3VqlU91pfVKve+vr6W2qWnp+faplu3bpb6atiwoaV2nhyzrX4+csMRFQAAAAC2Q6ICAAAAwHZIVAAAAADYDokKAAAAANshUQEAAABgOyQqAAAAAGyHRAUAAACA7ZCoAAAAALAdEhUAAAAAtkNl+gLStm3bXNtUrFjRUl/GmPyG4/Lxxx97rC9P++233yy18/f3t9TOk+vNasV5T87TKm/EtmPHDo/1BQDeVqZMmVzbeLLivFX/+te/LLWzWgXck5XpT58+bandr7/+aqmdlSrxVqu/e4Mnq9xbZXV9fPDBB5baefJzlFubjIwMJSYm5tpPno+orFu3Tt26dVN4eLgcDoeWLl3q9nr//v3lcDjcHp07d87rbAAAQD4wXgMo6vKcqKSkpKhx48aaPn16jm06d+6sI0eOuB7z58/PV5AAACBvGK8BFHV5PvWrS5cu6tKly1XbOJ1OhYaGXnNQAAAgfxivARR1BXIx/Zo1axQcHKw6depo8ODBOnnyZI5t09LSlJyc7PYAAAAFLy/jtcSYDaBweTxR6dy5s95//32tXLlSL730ktauXasuXbooPT092/ZxcXEKCgpyPSIiIjwdEgAAuEJex2uJMRtA4fL4Xb969+7t+n/Dhg3VqFEjRUdHa82aNerYsWOW9mPGjNHIkSNdz5OTk/niAwCggOV1vJYYswEUrgKvo1KjRg1VqlRJe/bsyfZ1p9OpwMBAtwcAAChcuY3XEmM2gMJV4InKoUOHdPLkSY/euxsAAHgW4zUAu8nzqV9nzpxx+7UlISFBW7ZsUYUKFVShQgVNnDhRPXv2VGhoqPbu3atRo0apZs2aio2N9WjgdleuXLlc25QsWbLgA7lC+fLlLbWrWbOmR+d7zz335NomOjraUl/eKKpYXBw+fNhSuzlz5hRwJADy63oerz2dTMXExHisL08WJczpFLwrValSxVK7zZs3W2rXs2fPXNucOnXKUl8333yzpXZWWC2qaHUbeLJIo6fnaaU/b43ZVgtDekKeE5VNmzapffv2rueZ56r269dPM2fO1NatW/Xee+/p1KlTCg8PV6dOnfT888/L6XR6LmoAAHBVjNcAiro8Jyrt2rW76i/aX375Zb4CAgAA+cd4DaCoK/BrVAAAAAAgr0hUAAAAANgOiQoAAAAA2yFRAQAAAGA7JCoAAAAAbIdEBQAAAIDtkKgAAAAAsJ0811GBNcOHD8+1TenSpQs+kCssWbKk0OeJouO9996z1G7//v0FHAkAFJ4RI0Z4rC9PVjufPXu2x/qSvFOx3ZOsxl9cbN++3VK7SpUqFXAkeZeRkaHExMRc23FEBQAAAIDtkKgAAAAAsB0SFQAAAAC2Q6ICAAAAwHZIVAAAAADYDokKAAAAANshUQEAAABgOyQqAAAAAGyHRAUAAACA7VCZvoC0b98+1za//fabpb6io6PzG06R4ONjLW/OyMgo4Eiyuh5imzt3bq5tzp8/n89oABRHISEhuX4XHTlyJNd+wsLCLM3PSl95UadOnVzbnD592lJfp06dstTOG9XfPTlPq9vA6jb1JF9fX0vt7FzpfseOHbm2SUtLK4RIsvL039/VcEQFAAAAgO2QqAAAAACwHRIVAAAAALZDogIAAADAdkhUAAAAANgOiQoAAAAA2yFRAQAAAGA7JCoAAAAAbIdEBQAAAIDtUJnei2JiYiy1Gzp0qKV2PXv2zLVNZGSkpb68wWpVd2NMAUeSladjS0lJybXNunXrLPVl1Y8//phrm2nTpnl0ngCQF56udu7JCtrly5e31M7qmB0XF5drmxMnTljqy2rFeTtXYvdkbOnp6R7rS/LsmN20aVNL7ayM2W+++aalvjzN6t/f1WRkZCgxMTHXdhxRAQAAAGA7JCoAAAAAbIdEBQAAAIDtkKgAAAAAsB0SFQAAAAC2Q6ICAAAAwHZIVAAAAADYDokKAAAAANtxGG9Uz7uK5ORkBQUFeTuMIqlu3bq5trFzwcc2bdpYanf33XdbamelUNbkyZMt9eVwOCy182TBx/Xr11vqC+6SkpIUGBjo7TCAYiFzzA4JCZGPT9H97dOThSGtat++fa5trI7ZmzZtym84bqwUJSxTpoylvqwUo5asjdmTJk2y1JfVz+JNN91kqd3Zs2dzbbNw4UJLfXmiWKK3efLvJbcxO0/fKnFxcbr55psVEBCg4OBg9ejRQ7t27XJrk5qaqiFDhqhixYoqW7asevbsaanyJAAA8BzGbABFXZ4SlbVr12rIkCHauHGjvvrqK124cEGdOnVy+3V4xIgR+vTTT7Vo0SKtXbtWhw8ftvwLOAAA8AzGbABFXYm8NF6+fLnb87lz5yo4OFibN29WmzZtlJSUpHfffVfz5s1Thw4dJElz5szRDTfcoI0bN6pFixaeixwAAOSIMRtAUZevE0qTkpIkSRUqVJAkbd68WRcuXFBMTIyrTd26dVWtWjVt2LAhP7MCAAD5wJgNoKjJ0xGVy2VkZGj48OFq1aqVGjRoIEk6evSoSpUqpXLlyrm1DQkJ0dGjR7PtJy0tTWlpaa7nycnJ1xoSAADIBmM2gKLomo+oDBkyRNu2bdOCBQvyFUBcXJyCgoJcj4iIiHz1BwAA3DFmAyiKrilRGTp0qD777DOtXr1aVatWdU0PDQ3V+fPnderUKbf2iYmJCg0NzbavMWPGKCkpyfU4ePDgtYQEAACywZgNoKjKU6JijNHQoUO1ZMkSrVq1SlFRUW6vN2nSRCVLltTKlStd03bt2qUDBw6oZcuW2fbpdDoVGBjo9gAAAPnDmA2gqMvTNSpDhgzRvHnztGzZMgUEBLjOYQ0KCpK/v7+CgoL08MMPa+TIkapQoYICAwM1bNgwtWzZkruHAABQiBizARR1eapMn1N17jlz5qh///6SLhWP+utf/6r58+crLS1NsbGxmjFjRo6Hka9EZXoA+UFleuCSwhyzrVSmt1LN2tNVu61W0C7q1cI9WSlc8s768MbnA9fGE9sqIyNDiYmJuY7ZeUpUCgOJCoD8IFEBCg+Jij2QqKAwFWaikq86KgAAAABQEEhUAAAAANgOiQoAAAAA2yFRAQAAAGA7JCoAAAAAbIdEBQAAAIDtkKgAAAAAsB0SFQAAAAC2U8LbAQAAgOufN4r1FZcCgcVlOWEPhfl544gKAAAAANshUQEAAABgOyQqAAAAAGyHRAUAAACA7ZCoAAAAALAdEhUAAAAAtkOiAgAAAMB2SFQAAAAA2A4FHwEAAHJx5MgRS+0ovnhtPLne7LytPBnb9bCcueGICgAAAADbIVEBAAAAYDskKgAAAABsh0QFAAAAgO2QqAAAAACwHRIVAAAAALZDogIAAADAdkhUAAAAANgOiQoAAAAA26EyPQAAQC6oOF902Hlb2Tk2O1a654gKAAAAANshUQEAAABgOyQqAAAAAGyHRAUAAACA7ZCoAAAAALAdEhUAAAAAtkOiAgAAAMB2SFQAAAAA2A6JCgAAAADbyVNl+ri4OC1evFg7d+6Uv7+/brnlFr300kuqU6eOq027du20du1at/cNGjRIs2bN8kzEAAAgV4U5ZicmJubaxpPVrD1dQdtKf3auKA7vux4+k3b8jOfpiMratWs1ZMgQbdy4UV999ZUuXLigTp06KSUlxa3do48+qiNHjrgeU6ZM8WjQAADg6hizARR1eTqisnz5crfnc+fOVXBwsDZv3qw2bdq4ppcuXVqhoaGeiRAAAOQZYzaAoi5f16gkJSVJkipUqOA2PT4+XpUqVVKDBg00ZswYnT17Nj+zAQAA+cSYDaCoydMRlctlZGRo+PDhatWqlRo0aOCa3rdvX0VGRio8PFxbt27VM888o127dmnx4sXZ9pOWlqa0tDTX8+Tk5GsNCQAAZIMxG0BRdM2JypAhQ7Rt2zatX7/ebfrAgQNd/2/YsKHCwsLUsWNH7d27V9HR0Vn6iYuL08SJE681DAAAkAvGbABF0TWd+jV06FB99tlnWr16tapWrXrVts2bN5ck7dmzJ9vXx4wZo6SkJNfj4MGD1xISAADIBmM2gKIqT0dUjDEaNmyYlixZojVr1igqKirX92zZskVSzrc8czqdcjqdeQkDAADkgjEbQFGXp0RlyJAhmjdvnpYtW6aAgAAdPXpUkhQUFCR/f3/t3btX8+bN0+23366KFStq69atGjFihNq0aaNGjRoVyAIAAICsGLMBFHV5SlRmzpwp6VKBqMvNmTNH/fv3V6lSpbRixQpNnTpVKSkpioiIUM+ePfXcc895LGAAAJA7xmwARZ3DGGO8HcTlkpOTFRQU5O0wABRRSUlJCgwM9HYYQLGQlzHbStVrq9W9rbJjpe2C4I2q6Lj+eOPzkduYna86KgAAAABQEEhUAAAAANgOiQoAAAAA2yFRAQAAAGA7JCoAAAAAbIdEBQAAAIDtkKgAAAAAsB0SFQAAAAC2k6fK9AAAANfCG0UEKVzojvWBq7Hj54MjKgAAAABsh0QFAAAAgO2QqAAAAACwHRIVAAAAALZDogIAAADAdkhUAAAAANgOiQoAAAAA2yFRAQAAAGA7tktUjDHeDgFAEcZ3CFB4+HsDkB+5fYfYLlE5ffq0t0MAUITxHQIUHv7eAORHbt8hDmOzn0MyMjJ0+PBhBQQEyOFwSJKSk5MVERGhgwcPKjAw0MsRXpuivgzE731FfRkKOn5jjE6fPq3w8HD5+NjuNxjgunQ9jtnE731FfRmKevySfcbsEh6fcz75+PioatWq2b4WGBhYZDd4pqK+DMTvfUV9GQoy/qCgoALpF0D2rucxm/i9r6gvQ1GPX/L+mM3PjgAAAABsh0QFAAAAgO0UiUTF6XRq/Pjxcjqd3g7lmhX1ZSB+7yvqy1DU4wdgTVH/Wyd+7yvqy1DU45fsswy2u5geAAAAAIrEERUAAAAAxQuJCgAAAADbIVEBAAAAYDskKgAAAABsp0gkKtOnT1f16tXl5+en5s2b6/vvv/d2SJZMmDBBDofD7VG3bl1vh3VV69atU7du3RQeHi6Hw6GlS5e6vW6M0bhx4xQWFiZ/f3/FxMRo9+7d3gk2G7nF379//yzbpHPnzt4JNhtxcXG6+eabFRAQoODgYPXo0UO7du1ya5OamqohQ4aoYsWKKlu2rHr27KnExEQvRezOSvzt2rXLsg0ee+wxL0UMwJOK6ngtFb0xu6iP1xJjtrcVhTHb9onKRx99pJEjR2r8+PH68ccf1bhxY8XGxurYsWPeDs2S+vXr68iRI67H+vXrvR3SVaWkpKhx48aaPn16tq9PmTJFb775pmbNmqXvvvtOZcqUUWxsrFJTUws50uzlFr8kde7c2W2bzJ8/vxAjvLq1a9dqyJAh2rhxo7766itduHBBnTp1UkpKiqvNiBEj9Omnn2rRokVau3atDh8+rLvvvtuLUf+Plfgl6dFHH3XbBlOmTPFSxAA8paiP11LRGrOL+ngtMWZ7W5EYs43NNWvWzAwZMsT1PD093YSHh5u4uDgvRmXN+PHjTePGjb0dxjWTZJYsWeJ6npGRYUJDQ83LL7/smnbq1CnjdDrN/PnzvRDh1V0ZvzHG9OvXz9x5551eiedaHDt2zEgya9euNcZcWt8lS5Y0ixYtcrX59ddfjSSzYcMGb4WZoyvjN8aYtm3bmieffNJ7QQEoEEV5vDamaI/ZRX28NoYx2w7sOGbb+ojK+fPntXnzZsXExLim+fj4KCYmRhs2bPBiZNbt3r1b4eHhqlGjhu6//34dOHDA2yFds4SEBB09etRtewQFBal58+ZFZntI0po1axQcHKw6depo8ODBOnnypLdDylFSUpIkqUKFCpKkzZs368KFC27boG7duqpWrZott8GV8WeKj49XpUqV1KBBA40ZM0Znz571RngAPOR6GK+l62fMvl7Ga4kxuzDZccwuUWhzugYnTpxQenq6QkJC3KaHhIRo586dXorKuubNm2vu3LmqU6eOjhw5ookTJ6p169batm2bAgICvB1enh09elSSst0ema/ZXefOnXX33XcrKipKe/fu1bPPPqsuXbpow4YN8vX19XZ4bjIyMjR8+HC1atVKDRo0kHRpG5QqVUrlypVza2vHbZBd/JLUt29fRUZGKjw8XFu3btUzzzyjXbt2afHixV6MFkB+FPXxWrq+xuzrYbyWGLMLk13HbFsnKkVdly5dXP9v1KiRmjdvrsjISC1cuFAPP/ywFyMrvnr37u36f8OGDdWoUSNFR0drzZo16tixoxcjy2rIkCHatm2brc+Rvpqc4h84cKDr/w0bNlRYWJg6duyovXv3Kjo6urDDBABJjNl2xJhdeOw6Ztv61K9KlSrJ19c3y90REhMTFRoa6qWorl25cuVUu3Zt7dmzx9uhXJPMdX69bA9JqlGjhipVqmS7bTJ06FB99tlnWr16tapWreqaHhoaqvPnz+vUqVNu7e22DXKKPzvNmzeXJNttAwDWXW/jtVS0x+zrcbyWGLMLip3HbFsnKqVKlVKTJk20cuVK17SMjAytXLlSLVu29GJk1+bMmTPau3evwsLCvB3KNYmKilJoaKjb9khOTtZ3331XJLeHJB06dEgnT560zTYxxmjo0KFasmSJVq1apaioKLfXmzRpopIlS7ptg127dunAgQO22Aa5xZ+dLVu2SJJttgGAvLvexmupaI/Z1+N4LTFme1qRGLO9dhm/RQsWLDBOp9PMnTvX7NixwwwcONCUK1fOHD161Nuh5eqvf/2rWbNmjUlISDDffPONiYmJMZUqVTLHjh3zdmg5On36tPnpp5/MTz/9ZCSZ1157zfz0009m//79xhhjXnzxRVOuXDmzbNkys3XrVnPnnXeaqKgoc+7cOS9HfsnV4j99+rR56qmnzIYNG0xCQoJZsWKFuemmm0ytWrVMamqqt0M3xhgzePBgExQUZNasWWOOHDniepw9e9bV5rHHHjPVqlUzq1atMps2bTItW7Y0LVu29GLU/5Nb/Hv27DGTJk0ymzZtMgkJCWbZsmWmRo0apk2bNl6OHEB+FeXx2piiN2YX9fHaGMZsbysKY7btExVjjJk2bZqpVq2aKVWqlGnWrJnZuHGjt0OypFevXiYsLMyUKlXKVKlSxfTq1cvs2bPH22Fd1erVq42kLI9+/foZYy7d8nDs2LEmJCTEOJ1O07FjR7Nr1y7vBn2Zq8V/9uxZ06lTJ1O5cmVTsmRJExkZaR599FFbDaLZxS7JzJkzx9Xm3Llz5vHHHzfly5c3pUuXNnfddZc5cuSI94K+TG7xHzhwwLRp08ZUqFDBOJ1OU7NmTfP000+bpKQk7wYOwCOK6nhtTNEbs4v6eG0MY7a3FYUx2/H/AwUAAAAA27D1NSoAAAAAiicSFQAAAAC2Q6ICAAAAwHZIVAAAAADYDokKAAAAANshUQEAAABgOyQqAAAAAGyHRAUAAACA7ZCoAAAAALAdEhUAAAAAtkOiAgAAAMB2SFQAAAAA2A6JCgAAAADbIVEBAAAAYDskKgAAAABsh0QFAAAAgO2QqAAAAACwHRIVACjiHA6Hhg4dWijzateundq1a1co88rOwoULVaFCBZ05c8ZrMXjC3Llz5XA4tG/fPrfpL7/8smrUqCFfX1/deOONkqTq1aurf//+Hpv3vn375HA4NHfuXNe00aNHq3nz5h6bBwB4AokKgGIpc0cx8+Hn56fatWtr6NChSkxM9Oi8ZsyY4bZTaHc7duzQhAkTsuxEe1t6errGjx+vYcOGqWzZsq7p1atXl8PhUExMTLbve/vtt13bedOmTYUVbp795z//0ahRo9SqVSvNmTNHL7zwQqHNe/jw4fr555/1ySefFNo8ASA3JbwdAAB406RJkxQVFaXU1FStX79eM2fO1Oeff65t27apdOnSHpnHjBkzVKlSJY/+Kl6QduzYoYkTJ6pdu3aqXr2622v/+c9/vBOUpE8//VS7du3SwIEDs7zm5+en1atX6+jRowoNDXV7LT4+Xn5+fkpNTS2sUHP14IMPqnfv3nI6na5pq1atko+Pj959912VKlXKNX3Xrl3y8SnY3xVDQ0N155136pVXXlH37t0LdF4AYBVHVAAUa126dNEDDzygRx55RHPnztXw4cOVkJCgZcuW5bvvs2fPeiDC7BljdO7cuQLrPyelSpVy24kuTHPmzFGrVq1UpUqVLK+1atVKZcuW1UcffeQ2/dChQ/r66691xx13FFaYlvj6+srPz08Oh8M17dixY/L398+yfp1Op0qWLFngMd13331av369/vvf/xb4vADAChIVALhMhw4dJEkJCQmuaR9++KGaNGkif39/VahQQb1799bBgwfd3teuXTs1aNBAmzdvVps2bVS6dGk9++yzql69urZv3661a9e6Tj/KvMZjwoQJbjuqmbK7fqF69erq2rWrvvzySzVt2lT+/v6aPXu22/vi4+NVp04d+fn5qUmTJlq3bp3b6/v379fjjz+uOnXqyN/fXxUrVtS9997rNp+5c+fq3nvvlSS1b9/eFfOaNWtcy3nlNSrHjh3Tww8/rJCQEPn5+alx48Z677333NpkXhfxyiuv6K233lJ0dLScTqduvvlm/fDDD9lvjMukpqZq+fLlOZ7e5efnp7vvvlvz5s1zmz5//nyVL19esbGxWd6zdetW9e/fXzVq1JCfn59CQ0P10EMP6eTJk1narlmzRk2bNpWfn5+io6M1e/bsbLdf5vVCS5cuVYMGDeR0OlW/fn0tX77crd2V29jhcGjOnDlKSUlxrfPM0wWzu0bl1KlTGj58uCIiIuR0OlWzZk299NJLysjIyNKuf//+CgoKUrly5dSvXz+dOnUq23WYuW49kaQDgCdw6hcAXGbv3r2SpIoVK0qS/v73v2vs2LG677779Mgjj+j48eOaNm2a2rRpo59++knlypVzvffkyZPq0qWLevfurQceeEAhISFq166d65qKv/3tb5KkkJCQa4pt165d6tOnjwYNGqRHH31UderUcb22du1affTRR3riiSfkdDo1Y8YMde7cWd9//70aNGggSfrhhx/07bffqnfv3qpatar27dunmTNnql27dtqxY4dKly6tNm3a6IknntCbb76pZ599VjfccIMkuf690rlz59SuXTvt2bNHQ4cOVVRUlBYtWqT+/fvr1KlTevLJJ93az5s3T6dPn9agQYPkcDg0ZcoU3X333frvf/971aMGmzdv1vnz53XTTTfl2KZv377q1KmT9u7dq+joaNf87rnnnmz7/uqrr/Tf//5XAwYMUGhoqLZv36633npL27dv18aNG11JyE8//aTOnTsrLCxMEydOVHp6uiZNmqTKlStnG8f69eu1ePFiPf744woICNCbb76pnj176sCBA67P1ZU++OADvfXWW/r+++/1zjvvSJJuueWWbNuePXtWbdu21e+//65BgwapWrVq+vbbbzVmzBgdOXJEU6dOlXTpqNudd96p9evX67HHHtMNN9ygJUuWqF+/ftn2GxQUpOjoaH3zzTcaMWJEjusZAAqNAYBiaM6cOUaSWbFihTl+/Lg5ePCgWbBggalYsaLx9/c3hw4dMvv27TO+vr7m73//u9t7f/nlF1OiRAm36W3btjWSzKxZs7LMq379+qZt27ZZpo8fP95k9zWcGVtCQoJrWmRkpJFkli9fnqW9JCPJbNq0yTVt//79xs/Pz9x1112uaWfPns3y3g0bNhhJ5v3333dNW7RokZFkVq9enaV927Zt3ZZl6tSpRpL58MMPXdPOnz9vWrZsacqWLWuSk5ONMcYkJCQYSaZixYrmjz/+cLVdtmyZkWQ+/fTTLPO63DvvvGMkmV9++SXLa5GRkeaOO+4wFy9eNKGhoeb55583xhizY8cOI8msXbvWtU5/+OGHq66P+fPnG0lm3bp1rmndunUzpUuXNr///rtr2u7du02JEiWybD9JplSpUmbPnj2uaT///LORZKZNm+aalt027tevnylTpky2y9evXz/X8+eff96UKVPG/Pbbb27tRo8ebXx9fc2BAweMMcYsXbrUSDJTpkxxtbl48aJp3bq1kWTmzJmTZV6dOnUyN9xwQ5bpAOANnPoFoFiLiYlR5cqVFRERod69e6ts2bJasmSJqlSposWLFysjI0P33XefTpw44XqEhoaqVq1aWr16tVtfTqdTAwYMKLBYo6Kisj2FSZJatmypJk2auJ5Xq1ZNd955p7788kulp6dLkvz9/V2vX7hwQSdPnlTNmjVVrlw5/fjjj9cU0+eff67Q0FD16dPHNa1kyZJ64okndObMGa1du9atfa9evVS+fHnX89atW0tSrtdFZJ6Odfl7r+Tr66v77rtP8+fPl3TpVLiIiAjXPK50+fpITU3ViRMn1KJFC0lyrY/09HStWLFCPXr0UHh4uKt9zZo11aVLl2z7jYmJcR3RkaRGjRopMDDQY9d+LFq0SK1bt1b58uXdPpcxMTFKT093nfL3+eefq0SJEho8eLDrvb6+vho2bFiOfWf2CQB2wKlfAIq16dOnq3bt2ipRooRCQkJUp04d1x2Wdu/eLWOMatWqle17rzydqEqVKgV6oXlUVFSOr2UXY+3atXX27FkdP35coaGhOnfunOLi4jRnzhz9/vvvMsa42iYlJV1TTPv371etWrWy3JUq81Sx/fv3u02vVq2a2/PMxOPPP/+0NL/LY85O37599eabb+rnn3/WvHnz1Lt372yvA5KkP/74QxMnTtSCBQt07Ngxt9cy18exY8d07tw51axZM8v7s5smZV1G6dJyWl3G3OzevVtbt27N8dSzzGXZv3+/wsLC3G7lLMntlMErGWNyXF8AUNhIVAAUa82aNVPTpk2zfS0jI0MOh0NffPGFfH19s7x+5Q7g5b/QW5HTDmHmEZAr5bX/Kw0bNkxz5szR8OHD1bJlSwUFBcnhcKh3795ZLsIuKNmtRyn3BCTz2o4///xTVatWzbFd8+bNFR0d7bp7W9++fXNse9999+nbb7/V008/rRtvvFFly5ZVRkaGOnfunK/1ca3LaFVGRoZuu+02jRo1KtvXa9eufc19//nnn6pUqdI1vx8APIlEBQByEB0dLWOMoqKi8rXzl1NCknk04dSpU24X5V95FMKK3bt3Z5n222+/qXTp0q5f3j/++GP169dPr776qqtNampqlrtA5eUX9cjISG3dulUZGRluR1V27tzpet0T6tatK+nS3dgaNmx41bZ9+vTR5MmTdcMNN7iqu1/pzz//1MqVKzVx4kSNGzfONf3K9RgcHCw/Pz/t2bMnSx/ZTSsM0dHROnPmTI53QMsUGRmplStX6syZM25J9a5du3J8T0JCgho3buyxWAEgP7hGBQBycPfdd8vX11cTJ07M8mu4MSbb29hmp0yZMtneEjbzOobLbyOckpKS5da+VmzYsMHtOpODBw9q2bJl6tSpk+sXfl9f3yzLMW3atCxHcMqUKSNJOd7G9nK33367jh496la/5OLFi5o2bZrKli2rtm3b5nlZstOkSROVKlXKUmX5Rx55ROPHj3dLyK6UuU6uXB+Zd8y6vF1MTIyWLl2qw4cPu6bv2bNHX3zxRR6WwHPuu+8+bdiwQV9++WWW106dOqWLFy9KurRtLl68qJkzZ7peT09P17Rp07LtNykpSXv37s3xbmMAUNg4ogIAOYiOjtbkyZM1ZswY7du3Tz169FBAQIASEhK0ZMkSDRw4UE899VSu/TRp0kQzZ87U5MmTVbNmTQUHB6tDhw7q1KmTqlWrpocfflhPP/20fH199c9//lOVK1fWgQMH8hRrgwYNFBsb63Z7YkmaOHGiq03Xrl31wQcfKCgoSPXq1dOGDRu0YsWKLLfMvfHGG+Xr66uXXnpJSUlJcjqd6tChg4KDg7PMd+DAgZo9e7b69++vzZs3q3r16vr444/1zTffaOrUqQoICMjTcuTEz89PnTp10ooVKzRp0qSrto2MjNSECROu2iYwMFBt2rTRlClTdOHCBVWpUkX/+c9/3OrnZJowYYL+85//qFWrVho8eLDS09P1j3/8Qw0aNNCWLVvysVTX5umnn9Ynn3yirl27qn///mrSpIlSUlL0yy+/6OOPP9a+fftUqVIldevWTa1atdLo0aO1b98+1atXT4sXL87xeqQVK1a4bmkMAHZAogIAVzF69GjVrl1br7/+umunPyIiQp06dVL37t0t9TFu3Djt379fU6ZM0enTp9W2bVt16NBBJUuW1JIlS/T4449r7NixCg0N1fDhw1W+fPk83z2sbdu2atmypSZOnKgDBw6oXr16mjt3rho1auRq88Ybb8jX11fx8fFKTU1Vq1attGLFiix3EgsNDdWsWbMUFxenhx9+WOnp6Vq9enW2iYq/v7/WrFmj0aNH67333lNycrLq1KmjOXPmZClSmF8PPfSQevbsqYMHDyoiIiLf/c2bN0/Dhg3T9OnTZYxRp06d9MUXX7jd3Uu6lGh+8cUXeuqppzR27FhFRERo0qRJ+vXXX12nuBWm0qVLa+3atXrhhRe0aNEivf/++woMDFTt2rU1ceJEBQUFSZJ8fHz0ySefaPjw4frwww/lcDjUvXt3vfrqq/q///u/LP0uWrRIt956q9sdywDAmxzGU1f3AQBQgNLT01WvXj3dd999ev75570djnr06KHt27dne31QUXP0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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Small Perturbation, Big Effects: Implications on Machine Learning and Neuroscience Research*\n",
        "\n",
        "As demonstrated above, even a small perturbation (epsilon = 0.1) can significantly alter the predictions of a machine learning model that boasts high accuracy—up to 99%. A seemingly trivial change can cause a model to misclassify an MNIST digit, such as misidentifying a \"3\" as an \"8,\" despite little visible difference between the original and perturbed images. This phenomenon reveals a fundamental\n",
        "vulnerability in machine learning models, where small disturbances at lower layers can amplify and disproportionately impact higher, more abstract features. I imagine that the  hierarchical structure of convolutional neural networks is a critical factor in this behavior. As input data passes through the layers, initial features are combined and refined into increasingly complex representations, making it challenging to pinpoint how small changes are affecting the model's decision-making. Thus, a \"small\" change will lead to the model thinking that \"3\" is \"8\", and we are quite clueless to exactly why.\n",
        "\n",
        "A notable comparison can be drawn to how human perception can be easily tricked by optical illusions. Just as a slight clever modification in an image can cause a human observer to misperceive an object, small perturbations in the input data can lead the model to misclassify it, despite there being no obvious change.\n",
        "\n",
        "In my opinion, the most significant implication for ML is in terms of safety, especially as AI technologies become more embedded in systems such as facial recognition and autonomous vehicles. These systems rely heavily on accurate image classification, but the discovery of their vulnerability to adversarial attacks raises concerns about their robustness. A tiny, carefully crafted perturbation could cause the model to misidentify crucial information, jeopardizing safety and reliability. This underscores the importance of developing resilient models that can withstand such adversarial inputs/attacks, particularly the AI fervor continues to be high, and the push for adoption of AI strong.\n",
        "\n",
        "From a neuroscience perspective, the phenomenon raises intriguing questions about the robustness of human perception. How does the brain filter out noise and focus on meaningful features? As we discussed in class, even in a noisy room, we can hear our name from afar. Unlike machine learning models, the human brain is not trained on data but has evolved mechanisms for interpreting ambiguous or distorted/noisy input. Investigating how the brain handles small changes in stimuli could inspire new approaches to improve the robustness of machine learning systems, perhaps by mimicking neurological principles that help humans stay resilient to such perturbations. Understanding both the limitations and strengths of human perception could provide valuable insights for building more robust AI models, blending the best of both human(biological) and artificial intelligence."
      ],
      "metadata": {
        "id": "GFq9Hv_stAH5"
      }
    }
  ]
}
